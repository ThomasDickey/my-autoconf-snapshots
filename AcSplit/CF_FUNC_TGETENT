dnl Check for tgetent function in termcap library.  If we cannot find this,
dnl we'll use the $LINES and $COLUMNS environment variables to pass screen
dnl size information to subprocesses.  (We cannot use terminfo's compatibility
dnl function, since it cannot provide the termcap-format data).
AC_DEFUN([CF_FUNC_TGETENT],
[
AC_MSG_CHECKING(for workable tgetent function)
AC_CACHE_VAL(cf_cv_func_tgetent,[
cf_save_LIBS="$LIBS"
cf_cv_func_tgetent=no
cf_TERMLIB="termcap termlib ncurses curses"
for cf_termlib in $cf_TERMLIB
do
	LIBS="$cf_save_LIBS -l$cf_termlib"
	AC_TRY_RUN([
/* terminfo implementations ignore the buffer argument, making it useless for
 * the xterm application, which uses this information to make a new $TERMCAP
 */
int main()
{
	char buffer[1024];
	buffer[0] = 0;
	tgetent(buffer, "vt100");
	exit(buffer[0] == 0); }],
	[echo "yes, there is a termcap/tgetent present" 1>&AC_FD_CC
	 cf_cv_func_tgetent=yes
	 break],
	[echo "no, there is no termcap/tgetent present" 1>&AC_FD_CC
	 cf_cv_func_tgetent=no],
	[echo "cross-compiling, cannot verify if a termcap/tgetent is present" 1>&AC_FD_CC
	 cf_cv_func_tgetent=no])
done
# If there was no workable (termcap) version, maybe there is a terminfo version
if test $cf_cv_func_tgetent = no ; then
	for cf_termlib in $cf_TERMLIB
	do
		AC_TRY_LINK([],[tgetent(0, 0)],
			[echo "there is a terminfo/tgetent present" 1>&AC_FD_CC
			 cf_cv_func_tgetent=$cf_termlib
			 break],
			[LIBS="$cf_save_LIBS"])
	done
fi
])
AC_MSG_RESULT($cf_cv_func_tgetent)
# If we found any sort of tgetent, check for the termcap.h file.  If this is
# linking against ncurses, we'll trigger the ifdef in resize.c that turns the
# termcap stuff back off.  Including termcap.h should otherwise be harmless.
if test $cf_cv_func_tgetent != no ; then
	AC_CHECK_HEADERS(termcap.h)
	if test $cf_cv_func_tgetent != yes ; then
		AC_DEFINE(USE_TERMINFO)
	fi
fi
])dnl
